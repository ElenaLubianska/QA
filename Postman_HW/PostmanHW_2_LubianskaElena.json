{
	"info": {
		"_postman_id": "ec4d1847-c61e-4f52-b9c1-4ffe4eb08e7d",
		"name": "Postman_HW_2_LubianskaElena",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Спарсить response body в json.\r",
							"var jsonBody = pm.response.json();\r",
							"console.log(jsonBody);\r",
							"//Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql('Elena');\r",
							"});\r",
							"//Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Your test age\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(+jsonData.age).to.eql(29);\r",
							"});\r",
							"//Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Your test salary\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(+jsonData.salary).to.eql(3500);\r",
							"});\r",
							"//Спарсить request.\r",
							"var jsonRequest = request.data;\r",
							"console.log(jsonRequest);\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name from request eql name from response\",function() {\r",
							"    pm.expect(request.data.name).to.eql(pm.response.json().name);\r",
							"});\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age from request eql age from response\",function() {\r",
							"    pm.expect(+request.data.age).to.eql(+pm.response.json().age);\r",
							"});\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary from request eql salary from response\",function() {\r",
							"    pm.expect(+request.data.salary).to.eql(pm.response.json().salary);\r",
							"});\r",
							"//Вывести в консоль параметр family из response.\r",
							"console.log(pm.response.json().family);\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"u_salary_1_5_year eql salary*4 from request\",function() {\r",
							"    pm.expect(pm.response.json().family.u_salary_1_5_year).to.eql(request.data.salary*4);\r",
							"});\r",
							"console.log(pm.response.json().family.u_salary_1_5_year);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Elena",
							"type": "text"
						},
						{
							"key": "age",
							"value": "29",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "3500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_3",
					"host": [
						"{{url}}user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"var jsonBody = pm.response.json();\r",
							"console.log(jsonBody);\r",
							"\r",
							"//Спарсить request.\r",
							"const paramsString = request.url.split('?')[1];\r",
							"const eachParamArray = paramsString.split('&');\r",
							"var params = {};\r",
							"eachParamArray.forEach((param) => {\r",
							"    const key = param.split('=')[0];\r",
							"    const value = param.split('=')[1];\r",
							"\tObject.assign(params, {[key]: value});\r",
							"});\r",
							"var jsonRequest = params;\r",
							"console.log('jsonRequest',jsonRequest);\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name from request eql name from response\",function() {\r",
							"    pm.expect(jsonRequest.name).to.eql(jsonBody.name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age from request eql age from response\",function() {\r",
							"    pm.expect(jsonRequest.age).to.eql(jsonBody.age);\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary from request eql salary from response\", function() {\r",
							"    pm.expect(+jsonRequest.salary).to.eql(jsonBody.salary);\r",
							"});\r",
							" \r",
							" //Вывести в консоль параметр family из response.\r",
							" console.log(jsonBody.family);\r",
							"\r",
							" //Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog have property name\", function(){\r",
							"    pm.expect(jsonBody.family.pets.dog).to.have.property('name');\r",
							" });\r",
							" \r",
							" //Проверить, что у параметра dog есть параметры age.\r",
							" pm.test(\"Dog have property age\", function(){\r",
							"    pm.expect(jsonBody.family.pets.dog).to.have.property('age');\r",
							" });\r",
							"\r",
							" //Проверить, что параметр name имеет значение Luky.\r",
							"  pm.test(\"Dog name is Luky\", function(){\r",
							"    pm.expect(jsonBody.family.pets.dog.name).to.eql('Luky');\r",
							" });\r",
							"  \r",
							"//Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Dog age is 4\", function(){\r",
							"    pm.expect(jsonBody.family.pets.dog.age).to.eql(4);\r",
							" });"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}object_info_3?name={{name}}&age={{age}}&salary={{salary}}&auth_token={{token}}",
					"host": [
						"{{url}}object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						},
						{
							"key": "auth_token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Спарсить response body в json.\r",
							"var jsonBody = pm.response.json();\r",
							"console.log(jsonBody);\r",
							"\r",
							"//Спарсить request.\r",
							"const paramsString = request.url.split('?')[1];\r",
							"const eachParamArray = paramsString.split('&');\r",
							"var params = {};\r",
							"eachParamArray.forEach((param) => {\r",
							"    const key = param.split('=')[0];\r",
							"    const value = param.split('=')[1];\r",
							"\tObject.assign(params, {[key]: value});\r",
							"});\r",
							"var jsonRequest = params;\r",
							"console.log('jsonRequest',jsonRequest);\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name from response eql name from request\", () => {\r",
							"    pm.expect(jsonBody.name).to.eql(jsonRequest.name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Age from response eql name from request\", () => {\r",
							"    pm.expect(jsonBody.age).to.eql(+jsonRequest.age);\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр salary из request.\r",
							"console.log(\"salary from request\",jsonRequest.salary);\r",
							"\r",
							"//Вывести в консоль параметр salary из response.\r",
							"console.log(\"salary from response\",jsonBody.salary)\r",
							"\r",
							"//Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"salary from response i = 0\",jsonBody.salary[0]);\r",
							"\r",
							"//Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"salary from response i = 1\",+jsonBody.salary[1]);\r",
							"\r",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"salary from response i = 2\",+jsonBody.salary[2]);\r",
							"\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Salary i = 0 from response eql salary from request\", () => {\r",
							"    pm.expect(jsonBody.salary[0]).to.eql(+jsonRequest.salary);\r",
							"});\r",
							"\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Salary i = 1 from response eql salary from request\", () => {\r",
							"    pm.expect(+jsonBody.salary[1]).to.eql(+jsonRequest.salary*2);\r",
							"});\r",
							"\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Salary i = 2 from response eql salary from request\", () => {\r",
							"    pm.expect(+jsonBody.salary[2]).to.eql(+jsonRequest.salary*3);\r",
							"});\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for(var i = 0; i < +jsonBody.salary.length; i++){\r",
							"    console.log(+jsonBody.salary[i]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Спарсить response body в json.\r",
							"var jsonBody = pm.response.json();\r",
							"console.log('jsonBody',jsonBody);\r",
							"\r",
							"//Спарсить request.\r",
							"var jsonRequest = request.data;\r",
							"console.log('jsonRequest',jsonRequest);\r",
							"\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"json response have property 'start_qa_salary'\", () => {\r",
							"    pm.expect(jsonBody).to.have.property('start_qa_salary');\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"json response have property 'qa_salary_after_6_months'\", () => {\r",
							"    pm.expect(jsonBody).to.have.property('qa_salary_after_6_months');\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"json response have property 'qa_salary_after_12_months'\", () => {\r",
							"    pm.expect(jsonBody).to.have.property('qa_salary_after_12_months');\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"json response have property 'qa_salary_after_1.5_year'\", () => {\r",
							"    pm.expect(jsonBody).to.have.property('qa_salary_after_1.5_year');\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"json response have property 'qa_salary_after_3.5_years'\", () => {\r",
							"    pm.expect(jsonBody).to.have.property('qa_salary_after_3.5_years');\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр person\r",
							"pm.test(\"json response have property 'person'\", () => {\r",
							"    pm.expect(jsonBody).to.have.property('person');\r",
							"});\r",
							"\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Property 'start_qa_salary' eql 'salary' from request\", () => {\r",
							"    pm.expect(jsonBody.start_qa_salary).to.eql(+jsonRequest.salary);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Property 'qa_salary_after_6_months' eql 'salary'*2 from request\", () => {\r",
							"    pm.expect(jsonBody.qa_salary_after_6_months).to.eql(jsonRequest.salary*2);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Property 'qa_salary_after_12_months' eql 'salary'*2.7 from request\", () => {\r",
							"    pm.expect(jsonBody.qa_salary_after_12_months).to.eql(jsonRequest.salary*2.7);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Property 'qa_salary_after_1.5_year' eql 'salary'*3.3 from request\", () => {\r",
							"    pm.expect(jsonBody['qa_salary_after_1.5_year']).to.eql(jsonRequest.salary*3.3);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Property 'qa_salary_after_3.5_years' eql 'salary'*3.8 from request\", () => {\r",
							"    pm.expect(jsonBody['qa_salary_after_3.5_years']).to.eql(jsonRequest.salary*3.8);\r",
							"});\r",
							"\r",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"The 1-th item in property 'person' from 'u_name' eql 'salary' from request\", () => {\r",
							"    pm.expect(jsonBody.person.u_name[1]).to.eql(+jsonRequest.salary);\r",
							"});\r",
							"\r",
							"//Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Property 'u_age' eql 'age' from request\", () => {\r",
							"    pm.expect(jsonBody.person.u_age).to.eql(+jsonRequest.age);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Property 'u_salary_5_years' eql 'salary'*4.2 from request\", () => {\r",
							"    pm.expect(jsonBody.person.u_salary_5_years).to.eql(jsonRequest.salary*4.2);\r",
							"});\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"var person = jsonBody.person;\r",
							"pm.test(\"Person list\", () => {\r",
							"    Object.keys(person).forEach( (i) => {\r",
							"        console.log(i,person[i]);\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_2",
					"host": [
						"{{url}}user_info_2"
					]
				}
			},
			"response": []
		}
	]
}